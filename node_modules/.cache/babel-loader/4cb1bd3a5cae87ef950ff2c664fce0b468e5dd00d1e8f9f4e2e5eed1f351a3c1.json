{"ast":null,"code":"var _jsxFileName = \"/Users/lorenacapraru/Documents/GitHub/baby-names-react/src/FilterNames.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FilterNames(props) {\n  const sortedNames = props.names.sort((a, b) => {\n    let fa = a.name;\n    let fb = b.name;\n    if (fa < fb) {\n      return -1;\n    }\n    if (fa > fb) {\n      return 1;\n    }\n    return 0;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sortedNames.filter(babyName => babyName.name.toUpperCase().includes(searchInput.toUpperCase())).map(baby => baby.sex === \"m\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"babyBoy\",\n      children: baby.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"babyGirl\",\n      children: baby.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_c = FilterNames;\nvar _c;\n$RefreshReg$(_c, \"FilterNames\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FilterNames","props","sortedNames","names","sort","a","b","fa","name","fb","children","filter","babyName","toUpperCase","includes","searchInput","map","baby","sex","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lorenacapraru/Documents/GitHub/baby-names-react/src/FilterNames.jsx"],"sourcesContent":["import React from \"react\";\n\nexport default function FilterNames(props) {\n  const sortedNames = props.names.sort((a, b) => {\n    let fa = a.name;\n    let fb = b.name;\n\n    if (fa < fb) {\n      return -1;\n    }\n    if (fa > fb) {\n      return 1;\n    }\n    return 0;\n  });\n  return (\n    <div>\n      {sortedNames\n        .filter((babyName) =>\n          babyName.name.toUpperCase().includes(searchInput.toUpperCase())\n        )\n        .map((baby) =>\n          baby.sex === \"m\" ? (\n            <span className=\"babyBoy\">{baby.name}</span>\n          ) : (\n            <span className=\"babyGirl\">{baby.name}</span>\n          )\n        )}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAE;EACzC,MAAMC,WAAW,GAAGD,KAAK,CAACE,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC7C,IAAIC,EAAE,GAAGF,CAAC,CAACG,IAAI;IACf,IAAIC,EAAE,GAAGH,CAAC,CAACE,IAAI;IAEf,IAAID,EAAE,GAAGE,EAAE,EAAE;MACX,OAAO,CAAC,CAAC;IACX;IACA,IAAIF,EAAE,GAAGE,EAAE,EAAE;MACX,OAAO,CAAC;IACV;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EACF,oBACEV,OAAA;IAAAW,QAAA,EACGR,WAAW,CACTS,MAAM,CAAEC,QAAQ,IACfA,QAAQ,CAACJ,IAAI,CAACK,WAAW,EAAE,CAACC,QAAQ,CAACC,WAAW,CAACF,WAAW,EAAE,CAAC,CAChE,CACAG,GAAG,CAAEC,IAAI,IACRA,IAAI,CAACC,GAAG,KAAK,GAAG,gBACdnB,OAAA;MAAMoB,SAAS,EAAC,SAAS;MAAAT,QAAA,EAAEO,IAAI,CAACT;IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,gBAE5CxB,OAAA;MAAMoB,SAAS,EAAC,UAAU;MAAAT,QAAA,EAAEO,IAAI,CAACT;IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtC;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAEV;AAACC,EAAA,GA5BuBxB,WAAW;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}